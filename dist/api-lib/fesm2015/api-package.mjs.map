{"version":3,"file":"api-package.mjs","sources":["../../../projects/api-lib/src/lib/api-lib.component.ts","../../../projects/api-lib/src/lib/Services/Resolver/cache-resolver.service.ts","../../../projects/api-lib/src/lib/Services/Interceptor/cache.interceptor.ts","../../../projects/api-lib/src/lib/Services/Interceptor/error.interceptor.ts","../../../projects/api-lib/src/lib/Services/Interceptor/custom-header.interceptor.ts","../../../projects/api-lib/src/lib/Services/loader.service.ts","../../../projects/api-lib/src/lib/Services/Interceptor/response.interceptor.ts","../../../projects/api-lib/src/lib/Components/progress/progress.component.ts","../../../projects/api-lib/src/lib/Components/progress/progress.component.html","../../../projects/api-lib/src/lib/Components/loading/loading.component.ts","../../../projects/api-lib/src/lib/Components/loading/loading.component.html","../../../projects/api-lib/src/lib/api-lib.module.ts","../../../projects/api-lib/src/lib/constants/config.ts","../../../projects/api-lib/src/lib/api-lib.service.ts","../../../projects/api-lib/src/lib/Services/api/media/media.service.ts","../../../projects/api-lib/src/public-api.ts","../../../projects/api-lib/src/api-package.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-api-lib',\n  template: `\n    <p>\n      api-lib works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class ApiLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { HttpResponse } from '@angular/common/http';\nimport {Injectable} from '@angular/core';\n@Injectable()\nexport class CacheResolverService{\n  // we will store HttpResponse in a map with key as unique identifire.\n  // this will be acting as a identifire and it will hold the list of responses.\n  private cache = new Map<string,[Date,HttpResponse<any>]>();\n  constructor() {}\n\n  set(key:any,value:any,timeToLive:number|null = null){\n    console.log('set cache key',key);\n    if(timeToLive){\n      const expiresIn = new Date();\n      expiresIn.setSeconds(expiresIn.getSeconds() + timeToLive);\n      // if we dont have to expire then put null here.\n      this.cache.set(key,[expiresIn,value ]);\n    }\n  }\n\n  get(key:any){\n    const tuple = this.cache.get(key);\n    if(!tuple) return null;\n    // extract tuple.\n    const expiresIn = tuple[0];\n    const httpSavedResponse = tuple[1];\n    const timeNow = new Date();\n    if(expiresIn && expiresIn.getTime() < timeNow.getTime()){\n      this.cache.delete(key);\n      return null;\n    }\n     return httpSavedResponse;\n  }\n\n}","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse\n} from '@angular/common/http';\nimport { Observable, of,tap } from 'rxjs';\nimport { CacheResolverService } from '../Resolver/cache-resolver.service';\nconst TIME_TO_LIVE = 10;\n@Injectable()\nexport class CacheInterceptor implements HttpInterceptor {\n  constructor(private cacheResolver:CacheResolverService){\n\n  }\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if(request.method!='GET'){\n    return next.handle(request);\n    }\n    const  cachedResponse = this.cacheResolver.get(request.url);\n    return cachedResponse ? of(cachedResponse): this.sendRequest(request,next);\n  }\n\n  sendRequest(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>>{\n    return next.handle(request)\n    .pipe(\n      tap((event)=>{\n        if(event instanceof HttpResponse){\n          this.cacheResolver.set(request.url,event,TIME_TO_LIVE);\n        }\n      })\n    )\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, EMPTY, throwError, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor() {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n     return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.error instanceof Error) {\n          // A client-side or network error occurred. Handle it accordingly.\n          console.error('An error occurred:', error.error.message);\n        } else {\n          // The backend returned an unsuccessful response code.\n          // The response body may contain clues as to what went wrong,\n          console.error(`Backend returned code ${error.status}, body was: ${error.error}`);\n        }\n        // If you want to return a new response:\n        // return of(new HttpResponse({body: [{name: \"Default value...\"}]}));\n        // If you want to return the error on the upper level:\n        // return throwError(error);\n        // or just return nothing:\n\n        return EMPTY;\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomHeaderInterceptor implements HttpInterceptor {\n\nintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const api_key= \"jgs\";\n    const token = \"000111\"\n    /*const reqWithAuth = req.clone({\n      setHeaders:{\n        api_key,\n        Authorization:`Bearer${token}`\n      }\n    });*/\n    return next.handle(req);\n}\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoaderService {\n  public isLoading:BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public progress:number = 0;\n  public bufferValue:number = 0;\n  constructor() { \n    this.isLoading.subscribe(res=>{\n      console.log(\"LOADING: \", res);\n    })\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse,\n  HttpEventType\n} from '@angular/common/http';\nimport { catchError, finalize, map, Observable, retry, throwError } from 'rxjs';\nimport { LoaderService } from '../loader.service';\n\n@Injectable()\nexport class ResponseInterceptor implements HttpInterceptor {\n\n  constructor(public loaderService:LoaderService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const startTime = new Date().getTime();\n    this.loaderService.isLoading.next(true);\n    return next.handle(request)\n    .pipe(\n      retry(2),\n      map((event:any)=>{\n        if(event.type === HttpEventType.UploadProgress) {\n          let progress = Math.round(event.loaded/ event.total! *100) + '%';\n          this.loaderService.progress = Math.round(event.loaded/ event.total! *100);\n          console.log(\"PROGRESS: \", progress);\n          this.loaderService.isLoading.next(true);\n          //console.log('Uploading:' + Math.round(event.loaded/ event.total! *100) + '%');\n           if (event.loaded == event.total){\n            this.loaderService.isLoading.next(false);\n              console.log(\"Event Loaded\",event);\n          } \n      } \n        const endTime = new Date().getTime();\n        const difference = endTime - startTime;\n        console.log(`${event.type} succeed in ${difference} ms.`)\n        return event\n      }),\n      catchError((error:HttpErrorResponse)=>{\n        return throwError(()=>{\n          new Error('Test');\n        });\n      }),\n      finalize(()=>{\n        this.loaderService.isLoading.next(false);\n      })\n    )\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { LoaderService } from '../../Services/loader.service';\nimport {ProgressBarMode} from '@angular/material/progress-bar';\n@Component({\n  selector: 'lib-progress',\n  templateUrl: './progress.component.html',\n  styleUrls: ['./progress.component.css']\n})\nexport class ProgressComponent implements OnInit {\n  color: ThemePalette = 'primary';\n  mode: ProgressBarMode = 'buffer';\n  value = 50;\n  bufferValue = 75;\n  loading:boolean = false;\n  constructor(public loader:LoaderService) { }\n\n  ngOnInit(): void {\n    this.loader.isLoading.subscribe(res=>{\n      this.loading = res;\n      this.value = this.loader.progress;\n      this.bufferValue = this.loader.bufferValue;\n    })\n  }\n\n}\n","\n\n  <div *ngIf=\"loader.isLoading |async\" class=\"progress\">\n    \n    <mat-card class=\"example-card\">\n      <mat-card-subtitle>Uploading...</mat-card-subtitle>\n      <mat-card-content>\n        \n      </mat-card-content>\n   \n      <mat-card-footer>\n        <mat-progress-bar\n        class=\"example-margin\"\n        [color]=\"color\"\n        [mode]=\"mode\"\n        [value]=\"loader.progress\"\n        [bufferValue]=\"loader.bufferValue\">\n    </mat-progress-bar>\n      </mat-card-footer>\n    </mat-card>\n     \n  </div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.css']\n})\nexport class LoadingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>loading works!</p>","import { HttpClientJsonpModule, HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CacheInterceptor } from './Services/Interceptor/cache.interceptor';\nimport { CacheResolverService } from './Services/Resolver/cache-resolver.service';\nimport { ErrorInterceptor } from './Services/Interceptor/error.interceptor';\nimport { CustomHeaderInterceptor } from './Services/Interceptor/custom-header.interceptor';\nimport { ResponseInterceptor } from './Services/Interceptor/response.interceptor';\nimport { ApiLibComponent } from './api-lib.component';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { ProgressComponent } from './Components/progress/progress.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { CommonModule } from '@angular/common';  \nimport { BrowserModule } from '@angular/platform-browser';\nimport { LoadingComponent } from './Components/loading/loading.component';\nimport { MatIconModule } from '@angular/material/icon';\n@NgModule({\n  declarations: [\n    ApiLibComponent,\n    ProgressComponent,\n    LoadingComponent,\n  ],\n  imports: [\n    HttpClientModule,\n    HttpClientJsonpModule,\n    MatProgressBarModule,\n    CommonModule,\n    MatCardModule,\n    MatIconModule\n  ],\n  exports: [\n    CommonModule,\n    ApiLibComponent,\n    ProgressComponent,\n    MatProgressBarModule,\n  ],\n  providers:[\n    CacheResolverService,\n    {\n    provide:HTTP_INTERCEPTORS,\n    useClass:CustomHeaderInterceptor,\n    multi:true\n  },\n  {\n    provide:HTTP_INTERCEPTORS,\n    useClass:CacheInterceptor,\n    multi:true\n  },\n  {\n    provide:HTTP_INTERCEPTORS,\n    useClass:ErrorInterceptor,\n    multi:true\n  },\n  {\n    provide:HTTP_INTERCEPTORS,\n    useClass:ResponseInterceptor,\n    multi:true\n  }\n]\n})\nexport class ApiLibModule { }\n","export const BASICTOKEN = 'eXV6ZWVfY2xpZW50OjI5MDIzNmNmLTgxZDItNDg5MS1hYmNlLWYzZmUzYzA5NWMxMA==';\n//export const SERVER_IP = 'backend-development.digitalmall.app';\nexport const SERVER_IP = 'backend-development.digitalmall.app';","import {\n  HttpClient,\n  HttpErrorResponse,\n  HttpEventType,\n  HttpHeaders,\n  HttpParams,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { SERVER_IP } from './constants/config';\nimport { Subject, tap, throwError } from 'rxjs';\nimport { LoaderService } from './Services/loader.service';\n@Injectable({\n  providedIn: 'root',\n})\nexport class JGSApiService {\n  private tokenName = 'dm-token';\n  private language = 'lang';\n  private getTokenUrl = 'sessions/token';\n  private appBaseUrl = `https://${SERVER_IP}/api/`;\n  private getTokenAccess: any = {};\n  private headersConfig: any = {};\n  private errorSubscriber = new Subject();\n\n  // CONSTRUCTOR API SERVICE\n  constructor(public http: HttpClient, private loader:LoaderService) {}\n\n  getRequestTest() {\n    return this.http\n      .get(\n        'https://backend-development.digitalmall.app/api/vehicle-for-sale/post-statuses',\n        { responseType: 'text' }\n      )\n      .pipe(\n        tap({\n          next: (data) => console.log(data),\n        })\n      );\n  }\n\n  postImages = (route: any) => {\n    console.log(\"Uploading Images\", route.apiroute);\n    return this.http.post(this.appBaseUrl + route.apiroute, route.data, {\n      headers: this.headersConfig,\n      reportProgress: true,\n      observe: 'events',\n    });\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { JGSApiService } from '../../../api-lib.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class MediaService {\n\n  constructor(private api:JGSApiService) { }\n\n  public uploadFile( formData:FormData, media_type:string, entity_id:string) { \n      let apiRoute: any = {};\n      apiRoute.apiroute = `storage/${media_type}/${entity_id}`;\n      let fileName = formData.get('file_name');\n      console.log(\"FILE NAME: \",fileName);\n      apiRoute.data = formData;\n      return this.api.postImages(apiRoute);\n  }\n}\n","/*\n * Public API Surface of api-lib\n */\n\nexport * from './lib/api-lib.component';\nexport * from './lib/api-lib.module';\nexport * from './lib/Services/api/media/media.service';\nexport * from './lib/Components/progress/progress.component';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.CacheResolverService","catchError","i1.LoaderService","i2.LoaderService","i1.JGSApiService"],"mappings":"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"}